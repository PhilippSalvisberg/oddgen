/*
 * Copyright 2017 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.oddgen.sqldev.plugin.templates

import java.io.File
import java.sql.Connection
import java.util.HashMap
import java.util.LinkedHashMap
import java.util.List
import oracle.ide.config.Preferences
import org.oddgen.sqldev.generators.OddgenGenerator2
import org.oddgen.sqldev.generators.model.Node
import org.oddgen.sqldev.model.PreferenceModel
import org.oddgen.sqldev.plugin.PluginUtils
import org.springframework.jdbc.core.JdbcTemplate
import org.springframework.jdbc.datasource.SingleConnectionDataSource

class NewXtendGenerator implements OddgenGenerator2 {

	public static val CLASS_NAME = "Class name"
	public static val PACKAGE_NAME = "Package name"
	public static val OUTPUT_DIR = "Output directory"
	
	var JdbcTemplate jdbcTemplate
	var Node node
	val extension TemplateTools templateTools = new TemplateTools
	val preferences = PreferenceModel.getInstance(Preferences.getPreferences());
	
	
	def private pomTemplate() '''
		<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
		   <modelVersion>4.0.0</modelVersion>
		   <groupId>org.oddgen</groupId>
		   <artifactId>«node.params.get(PACKAGE_NAME)».«node.params.get(CLASS_NAME).toLowerCase»</artifactId>
		   <version>1.0.0-SNAPSHOT</version>
		   <packaging>jar</packaging>
		   <name>«node.params.get(CLASS_NAME)»</name>
		   <description>«node.params.get(CLASS_NAME)» generated by oddgen for SQL Developer.</description>
		   <properties>
		      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		   </properties>
		   <dependencies>
		      <!-- ordinary dependencies -->
		      <dependency>
		         <groupId>org.oddgen</groupId>
		         <artifactId>org.oddgen.sqldev</artifactId>
		         <version>0.3.0</version>
		         <scope>provided</scope>
		      </dependency>
		      <!-- transient dependencies of org.oddgen.sqldev, workaround, see https://github.com/oddgen/oddgen/issues/24 -->
		      <dependency>
		         <groupId>org.springframework</groupId>
		         <artifactId>spring-jdbc</artifactId>
		         <version>4.3.10.RELEASE</version>
		         <scope>provided</scope>
		      </dependency>
		      <dependency>
		         <groupId>org.eclipse.xtend</groupId>
		         <artifactId>org.eclipse.xtend.lib</artifactId>
		         <version>2.12.0</version>
		         <scope>provided</scope>
		      </dependency>
		   </dependencies>
		   <!-- Build Settings -->
		   <build>
		      <plugins>
		         <plugin>
		            <groupId>org.eclipse.xtend</groupId>
		            <artifactId>xtend-maven-plugin</artifactId>
		            <version>2.12.0</version>
		            <executions>
		               <execution>
		                  <id>main</id>
		                  <goals>
		                     <goal>compile</goal>
		                  </goals>
		                  <configuration>
		                     <outputDirectory>${project.build.directory}/xtend-gen/main</outputDirectory>
		                  </configuration>
		               </execution>
		            </executions>
		         </plugin>
		         <plugin>
		            <groupId>org.apache.maven.plugins</groupId>
		            <version>3.7.0</version>
		            <artifactId>maven-compiler-plugin</artifactId>
		            <configuration>
		               <target>1.7</target>
		               <includes>
		                  <include>**/*.java</include>
		               </includes>
		            </configuration>
		         </plugin>
		      </plugins>
		   </build>
		</project>
	'''
	
	def private xtendTemplate() '''
		/*
		 * Copyright 2017 Philipp Salvisberg <philipp.salvisberg@trivadis.com>
		 * 
		 * Licensed under the Apache License, Version 2.0 (the "License");
		 * you may not use this file except in compliance with the License.
		 * You may obtain a copy of the License at
		 * 
		 *     http://www.apache.org/licenses/LICENSE-2.0
		 * 
		 * Unless required by applicable law or agreed to in writing, software
		 * distributed under the License is distributed on an "AS IS" BASIS,
		 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
		 * See the License for the specific language governing permissions and
		 * limitations under the License.
		 */
		package «node.params.get(PACKAGE_NAME)»
		
		import java.sql.Connection
		import java.util.HashMap
		import java.util.LinkedHashMap
		import java.util.List
		import org.oddgen.sqldev.generators.OddgenGenerator2
		import org.oddgen.sqldev.generators.model.Node
		import org.springframework.jdbc.core.BeanPropertyRowMapper
		import org.springframework.jdbc.core.JdbcTemplate
		import org.springframework.jdbc.datasource.SingleConnectionDataSource
		
		class «node.params.get(CLASS_NAME)» implements OddgenGenerator2 {
		
			public static var P1 = "P1?"
			public static var P2 = "P2"
			public static var P3 = "P3"
		
			override getName(Connection conn) {
				return "«node.params.get(CLASS_NAME).toFirstUpper»"
			}
		
			override getDescription(Connection conn) {
				return "«node.params.get(CLASS_NAME).toFirstUpper»"
			}
		
			override getFolders(Connection conn) {
				return #[«FOR f :preferences.defaultClientGeneratorFolder.split(",").filter[!it.empty] SEPARATOR ", "»"«f.trim»"«ENDFOR»]
			}
		
			override getHelp(Connection conn) {
				return "<p>not yet available</p>"
			}
		
			override getNodes(Connection conn, String parentNodeId) {
				val params = new LinkedHashMap<String, String>()
				params.put(P1, "Yes")
				params.put(P2, "Value 1")
				params.put(P3, "Some value")
				if (parentNodeId === null || parentNodeId.empty) {
					val tableNode = new Node
					tableNode.id = "TABLE"
					tableNode.params = params
					tableNode.leaf = false
					tableNode.generatable = true
					tableNode.multiselectable = true
					val viewNode = new Node
					viewNode.id = "VIEW"
					viewNode.params = params
					viewNode.leaf = false
					viewNode.generatable = true
					viewNode.multiselectable = true
					return #[tableNode, viewNode]
				} else {
					val sql = «"'''"»
						SELECT object_type || '.' || object_name AS id,
						       object_type AS parent_id,
						       1 AS leaf,
						       1 AS generatable,
						       1 AS multiselectable
						  FROM user_objects
						 WHERE object_type = ?
						   AND generated = 'N'
					«"'''"»
					val jdbcTemplate = new JdbcTemplate(new SingleConnectionDataSource(conn, true))
					val nodes = jdbcTemplate.query(sql, new BeanPropertyRowMapper<Node>(Node), #[parentNodeId])
					for (node : nodes) {
						node.params = params
					}
					return nodes
				}
			}
		
			override HashMap<String, List<String>> getLov(Connection conn, LinkedHashMap<String, String> params,
				List<Node> nodes) {
				val lov = new HashMap<String, List<String>>()
				lov.put(P1, #["Yes", "No"])
				lov.put(P2, #["Value 1", "Value 2", "Value 3"])
				return lov
			}
		
			override getParamStates(Connection conn, LinkedHashMap<String, String> params, List<Node> nodes) {
				val paramStates = new HashMap<String, Boolean>()
				paramStates.put(P2, params.get(P1) == "Yes")
				return paramStates
			}
		
			override generateProlog(Connection conn, List<Node> nodes) {
				return ""
			}
		
			override generateSeparator(Connection conn) {
				return ""
			}
		
			override generateEpilog(Connection conn, List<Node> nodes) {
				return ""
			}
		
			override generate(Connection conn, Node node) «"'''"»
				-- «"«"»node.id«"»"» «"«"»node.params.get(P1)«"»"» «"«"»node.params.get(P2)«"»"» «"«"»node.params.get(P3)«"»"»
			«"'''"»
		}
	'''

	override isSupported(Connection conn) {
		return true
	}
	
	override getName(Connection conn) {
		return "Xtend generator"
	}

	override getDescription(Connection conn) {
		return "Generate a Xtend oddgen plugin"
	}

	override getFolders(Connection conn) {
		return #["Templates"]
	}

	override getHelp(Connection conn) {
		return "<p>not yet available</p>"
	}

	override getNodes(Connection conn, String parentNodeId) {
		val params = new LinkedHashMap<String, String>()
		params.put(CLASS_NAME, "NewGenerator")
		params.put(PACKAGE_NAME, "org.oddgen.plugin")
		params.put(OUTPUT_DIR, '''«System.getProperty("user.home")»«File.separator»oddgen«File.separator»xtend''')
		val node = new Node
		node.id = "Xtend template"
		node.params = params
		node.leaf = true
		node.generatable = true
		return #[node]
	}

	override getLov(Connection conn, LinkedHashMap<String, String> params, List<Node> nodes) {
		return new HashMap<String, List<String>>
	}

	override getParamStates(Connection conn, LinkedHashMap<String, String> params, List<Node> nodes) {
		return new HashMap<String, Boolean>
	}

	override generateProlog(Connection conn, List<Node> nodes) {
		return ""
	}

	override generateSeparator(Connection conn) {
		return ""
	}

	override generateEpilog(Connection conn, List<Node> nodes) {
		return ""
	}

	override generate(Connection conn, Node node) {
		this.jdbcTemplate = new JdbcTemplate(new SingleConnectionDataSource(conn, true))
		this.node = node
		var String result
		val outputDir = node.params.get(OUTPUT_DIR)
		val sourceDir = '''«outputDir»«File.separator»src«File.separator»main«File.separator»java«FOR d : node.params.get(PACKAGE_NAME).split(".")»«File.separator»«d»«ENDFOR»'''
		val pluginJar = '''«outputDir»«File.separator»target«File.separator»«node.params.get(PACKAGE_NAME)».«node.params.get(CLASS_NAME).toLowerCase»-1.0.0-SNAPSHOT.jar'''
		result = '''
			«mkdirs(outputDir)»
			«mkdirs(sourceDir)»
			«writeToFile('''«outputDir»«File.separator»pom.xml''', pomTemplate.toString )»
			«writeToFile('''«sourceDir»«File.separator»«node.params.get(CLASS_NAME)».xtend''', xtendTemplate.toString)»
			
			To build the plugin:
			
			cd «outputDir»
			mvn clean package
			
			To install the plugin:
			
			«IF System.getProperty("os.name").startsWith("Windows")»
				copy «pluginJar» «PluginUtils.sqlDevExtensionDir»
			«ELSE»
				cp «pluginJar» «PluginUtils.sqlDevExtensionDir»
			«ENDIF»
		'''
	}

}
